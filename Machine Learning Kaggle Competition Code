{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys \n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import statsmodels as sm\n",
    "import sklearn\n",
    "import scipy as sp\n",
    "%matplotlib inline \n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>courier_id</th>\n",
       "      <th>wave_index</th>\n",
       "      <th>tracking_id</th>\n",
       "      <th>courier_wave_start_lng</th>\n",
       "      <th>courier_wave_start_lat</th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>level</th>\n",
       "      <th>speed</th>\n",
       "      <th>max_load</th>\n",
       "      <th>...</th>\n",
       "      <th>hour</th>\n",
       "      <th>weather_grade_Bad Weather</th>\n",
       "      <th>weather_grade_Normal Weather</th>\n",
       "      <th>weather_grade_Slightly Bad Weather</th>\n",
       "      <th>weather_grade_Very Bad Weather</th>\n",
       "      <th>source_type_ASSIGN</th>\n",
       "      <th>source_type_DELIVERY</th>\n",
       "      <th>source_type_PICKUP</th>\n",
       "      <th>action_type_DELIVERY</th>\n",
       "      <th>action_type_PICKUP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100070e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020020e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100070e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020020e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100070e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020020e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100070e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020020e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100070e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020020e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   courier_id  wave_index   tracking_id  courier_wave_start_lng  \\\n",
       "0    10007871           0  2.100070e+18              121.630997   \n",
       "1    10007871           0  2.100070e+18              121.630997   \n",
       "2    10007871           0  2.100070e+18              121.630997   \n",
       "3    10007871           0  2.100070e+18              121.630997   \n",
       "4    10007871           0  2.100070e+18              121.630997   \n",
       "\n",
       "   courier_wave_start_lat      date         group  level     speed  max_load  \\\n",
       "0               39.142343  20200201  2.020020e+16      3  4.751832        11   \n",
       "1               39.142343  20200201  2.020020e+16      3  4.751832        11   \n",
       "2               39.142343  20200201  2.020020e+16      3  4.751832        11   \n",
       "3               39.142343  20200201  2.020020e+16      3  4.751832        11   \n",
       "4               39.142343  20200201  2.020020e+16      3  4.751832        11   \n",
       "\n",
       "   ... hour weather_grade_Bad Weather  weather_grade_Normal Weather  \\\n",
       "0  ...   11                         0                             1   \n",
       "1  ...   11                         0                             1   \n",
       "2  ...   11                         0                             1   \n",
       "3  ...   11                         0                             1   \n",
       "4  ...   11                         0                             1   \n",
       "\n",
       "   weather_grade_Slightly Bad Weather  weather_grade_Very Bad Weather  \\\n",
       "0                                   0                               0   \n",
       "1                                   0                               0   \n",
       "2                                   0                               0   \n",
       "3                                   0                               0   \n",
       "4                                   0                               0   \n",
       "\n",
       "   source_type_ASSIGN  source_type_DELIVERY  source_type_PICKUP  \\\n",
       "0                   1                     0                   0   \n",
       "1                   0                     0                   1   \n",
       "2                   0                     1                   0   \n",
       "3                   0                     0                   1   \n",
       "4                   0                     1                   0   \n",
       "\n",
       "   action_type_DELIVERY  action_type_PICKUP  \n",
       "0                     0                   1  \n",
       "1                     1                   0  \n",
       "2                     0                   1  \n",
       "3                     1                   0  \n",
       "4                     0                   1  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"dataframe_train.csv\")\n",
    "#get dummies\n",
    "df = pd.get_dummies(df, columns=['weather_grade','source_type','action_type'],drop_first=False)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>courier_id</th>\n",
       "      <th>wave_index</th>\n",
       "      <th>tracking_id</th>\n",
       "      <th>courier_wave_start_lng</th>\n",
       "      <th>courier_wave_start_lat</th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>level</th>\n",
       "      <th>speed</th>\n",
       "      <th>max_load</th>\n",
       "      <th>...</th>\n",
       "      <th>grid_distance</th>\n",
       "      <th>expected_use_time</th>\n",
       "      <th>urgency</th>\n",
       "      <th>hour</th>\n",
       "      <th>weather_grade_Bad Weather</th>\n",
       "      <th>weather_grade_Slightly Bad Weather</th>\n",
       "      <th>weather_grade_Very Bad Weather</th>\n",
       "      <th>source_type_DELIVERY</th>\n",
       "      <th>source_type_PICKUP</th>\n",
       "      <th>action_type_DELIVERY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100070e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020020e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>377.0</td>\n",
       "      <td>804</td>\n",
       "      <td>1246</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100070e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020020e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>780.0</td>\n",
       "      <td>298</td>\n",
       "      <td>1246</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100070e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020020e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>550.0</td>\n",
       "      <td>545</td>\n",
       "      <td>2462</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100070e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020020e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>707.0</td>\n",
       "      <td>341</td>\n",
       "      <td>1205</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100070e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020020e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>770.0</td>\n",
       "      <td>166</td>\n",
       "      <td>1882</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   courier_id  wave_index   tracking_id  courier_wave_start_lng  \\\n",
       "0    10007871           0  2.100070e+18              121.630997   \n",
       "1    10007871           0  2.100070e+18              121.630997   \n",
       "2    10007871           0  2.100070e+18              121.630997   \n",
       "3    10007871           0  2.100070e+18              121.630997   \n",
       "4    10007871           0  2.100070e+18              121.630997   \n",
       "\n",
       "   courier_wave_start_lat      date         group  level     speed  max_load  \\\n",
       "0               39.142343  20200201  2.020020e+16      3  4.751832        11   \n",
       "1               39.142343  20200201  2.020020e+16      3  4.751832        11   \n",
       "2               39.142343  20200201  2.020020e+16      3  4.751832        11   \n",
       "3               39.142343  20200201  2.020020e+16      3  4.751832        11   \n",
       "4               39.142343  20200201  2.020020e+16      3  4.751832        11   \n",
       "\n",
       "   ... grid_distance expected_use_time  urgency  hour  \\\n",
       "0  ...         377.0               804     1246    11   \n",
       "1  ...         780.0               298     1246    11   \n",
       "2  ...         550.0               545     2462    11   \n",
       "3  ...         707.0               341     1205    11   \n",
       "4  ...         770.0               166     1882    11   \n",
       "\n",
       "   weather_grade_Bad Weather  weather_grade_Slightly Bad Weather  \\\n",
       "0                          0                                   0   \n",
       "1                          0                                   0   \n",
       "2                          0                                   0   \n",
       "3                          0                                   0   \n",
       "4                          0                                   0   \n",
       "\n",
       "   weather_grade_Very Bad Weather  source_type_DELIVERY  source_type_PICKUP  \\\n",
       "0                               0                     0                   0   \n",
       "1                               0                     0                   1   \n",
       "2                               0                     1                   0   \n",
       "3                               0                     0                   1   \n",
       "4                               0                     1                   0   \n",
       "\n",
       "   action_type_DELIVERY  \n",
       "0                     0  \n",
       "1                     1  \n",
       "2                     0  \n",
       "3                     1  \n",
       "4                     0  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#drop baseline\n",
    "df = df.drop(columns = ['weather_grade_Normal Weather','source_type_ASSIGN','action_type_PICKUP'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr = df.corr()\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "cax = ax.matshow(corr,cmap='coolwarm', vmin=-1, vmax=1)\n",
    "fig.colorbar(cax)\n",
    "ticks = np.arange(0,len(df.columns),1)\n",
    "ax.set_xticks(ticks)\n",
    "plt.xticks(rotation=90)\n",
    "ax.set_yticks(ticks)\n",
    "ax.set_xticklabels(df.columns)\n",
    "ax.set_yticklabels(df.columns)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop(columns = ['expected_use_time','action_type_DELIVERY','courier_id', 'wave_index', 'tracking_id', 'group', 'id','aoi_id','shop_id','courier_wave_start_lng', 'courier_wave_start_lat','source_tracking_id','source_lng','source_lat','target_lng','target_lat'])\n",
    "y = np.array(df['action_type_DELIVERY'])\n",
    "# Split dataframe_train into training and testing sets.\n",
    "from sklearn.model_selection import train_test_split as tr_te_split\n",
    "X_train, X_test, y_train, y_test = tr_te_split(X, y,stratify=y,random_state=666,test_size=0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1) Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 0.7211\n",
      "The out-of-sample ROC-AUC is: 0.7197\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression as LR\n",
    "from sklearn.metrics import roc_auc_score\n",
    "# LR without PCA\n",
    "lr = LR(C=1,max_iter=10000).fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,lr.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,lr.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression as LR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 0.8104\n",
      "The out-of-sample ROC-AUC is: 0.8098\n"
     ]
    }
   ],
   "source": [
    "##Without PCA\n",
    "pca_lr = make_pipeline(StandardScaler(), LR(C=1,max_iter=10000))\n",
    "pca_lr.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_lr.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_lr.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 0.7304\n",
      "The out-of-sample ROC-AUC is: 0.7290\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=11\n",
    "pca_lr = make_pipeline(StandardScaler(), PCA(n_components=11), LR(C=1,max_iter=10000))\n",
    "pca_lr.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_lr.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_lr.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 0.7300\n",
      "The out-of-sample ROC-AUC is: 0.7284\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=10\n",
    "pca_lr = make_pipeline(StandardScaler(), PCA(n_components=10), LR(C=1,max_iter=10000))\n",
    "pca_lr.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_lr.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_lr.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 0.7298\n",
      "The out-of-sample ROC-AUC is: 0.7282\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=9\n",
    "pca_lr = make_pipeline(StandardScaler(), PCA(n_components=9), LR(C=1,max_iter=10000))\n",
    "pca_lr.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_lr.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_lr.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 0.7298\n",
      "The out-of-sample ROC-AUC is: 0.7282\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=8\n",
    "pca_lr = make_pipeline(StandardScaler(), PCA(n_components=8), LR(C=1,max_iter=10000))\n",
    "pca_lr.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_lr.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_lr.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we could see from above, the logistic regression without PCA performs the best. We then apply this model to train the entire training data frame and predict the testing dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC of the entire training set is: 0.8103\n"
     ]
    }
   ],
   "source": [
    "pca_lr = make_pipeline(StandardScaler(), LR(C=1,max_iter=10000))\n",
    "pca_lr.fit(X, y)\n",
    "print('The in-sample ROC-AUC of the entire training set is: %0.4f' % roc_auc_score(y,pca_lr.predict_proba(X)[:,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2) knn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We first test the baseline knn model without PCA or Clustering\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best n_neighbor is {'n_neighbors': 100}\n",
      "The in-sample ROC-AUC is 0.8055\n"
     ]
    }
   ],
   "source": [
    "grid_knn_clf = GridSearchCV(KNeighborsClassifier(),[{'n_neighbors':[10,50,100,150,200]}],scoring = 'roc_auc',cv=5)\n",
    "grid_knn_clf.fit(X_train,y_train)\n",
    "print(\"The best n_neighbor is\",grid_knn_clf.best_params_)\n",
    "print(\"The in-sample ROC-AUC is %0.4f\" % grid_knn_clf.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 0.8632\n",
      "The out-of-sample ROC-AUC is: 0.8550\n"
     ]
    }
   ],
   "source": [
    "## PCA with n_components=12\n",
    "knn_clf = make_pipeline(StandardScaler(), PCA(n_components=12),KNeighborsClassifier(n_neighbors = 100))\n",
    "knn_clf.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,knn_clf.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,knn_clf.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 0.8622\n",
      "The out-of-sample ROC-AUC is: 0.8539\n"
     ]
    }
   ],
   "source": [
    "## PCA with n_components=11\n",
    "knn_clf = make_pipeline(StandardScaler(), PCA(n_components=11),KNeighborsClassifier(n_neighbors = 100))\n",
    "knn_clf.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,knn_clf.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,knn_clf.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 0.8640\n",
      "The out-of-sample ROC-AUC is: 0.8561\n"
     ]
    }
   ],
   "source": [
    "## PCA with n_components=10\n",
    "knn_clf = make_pipeline(StandardScaler(), PCA(n_components=10),KNeighborsClassifier(n_neighbors = 100))\n",
    "knn_clf.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,knn_clf.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,knn_clf.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 0.8665\n",
      "The out-of-sample ROC-AUC is: 0.8585\n"
     ]
    }
   ],
   "source": [
    "## PCA with n_components=9\n",
    "knn_clf = make_pipeline(StandardScaler(), PCA(n_components=9),KNeighborsClassifier(n_neighbors = 100))\n",
    "knn_clf.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,knn_clf.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,knn_clf.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 0.8673\n",
      "The out-of-sample ROC-AUC is: 0.8595\n"
     ]
    }
   ],
   "source": [
    "## PCA with n_components=8\n",
    "knn_clf = make_pipeline(StandardScaler(), PCA(n_components=8),KNeighborsClassifier(n_neighbors = 100))\n",
    "knn_clf.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,knn_clf.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,knn_clf.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC of the entire training set is: 0.8678\n"
     ]
    }
   ],
   "source": [
    "knn_clf = make_pipeline(StandardScaler(), PCA(n_components=8),KNeighborsClassifier(n_neighbors = 100))\n",
    "knn_clf.fit(X,y)\n",
    "print('The in-sample ROC-AUC of the entire training set is: %0.4f' % roc_auc_score(y,knn_clf.predict_proba(X)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_auc_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3) Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier, export_graphviz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.7630\n"
     ]
    }
   ],
   "source": [
    "tree_clf =  DecisionTreeClassifier() \n",
    "tree_clf.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,tree_clf.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,tree_clf.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.7613\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=12\n",
    "pca_tree = make_pipeline(PCA(n_components=12), DecisionTreeClassifier())\n",
    "pca_tree.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_tree.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_tree.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.7610\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=11\n",
    "pca_tree = make_pipeline(PCA(n_components=11), DecisionTreeClassifier())\n",
    "pca_tree.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_tree.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_tree.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.7604\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=10\n",
    "pca_tree = make_pipeline(PCA(n_components=10), DecisionTreeClassifier())\n",
    "pca_tree.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_tree.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_tree.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.7614\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=9\n",
    "pca_tree = make_pipeline(PCA(n_components=9), DecisionTreeClassifier())\n",
    "pca_tree.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_tree.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_tree.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.7630\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=8\n",
    "pca_tree = make_pipeline(PCA(n_components=8), DecisionTreeClassifier())\n",
    "pca_tree.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_tree.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_tree.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.7274\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=7\n",
    "pca_tree = make_pipeline(PCA(n_components=7), DecisionTreeClassifier())\n",
    "pca_tree.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_tree.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_tree.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.7266\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=6\n",
    "pca_tree = make_pipeline(PCA(n_components=6), DecisionTreeClassifier())\n",
    "pca_tree.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_tree.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_tree.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC of the entire training set is: 1.0000\n"
     ]
    }
   ],
   "source": [
    "pca_tree = make_pipeline(PCA(n_components=8), DecisionTreeClassifier())\n",
    "pca_tree.fit(X, y)\n",
    "print('The in-sample ROC-AUC of the entire training set is: %0.4f' % roc_auc_score(y,pca_tree.predict_proba(X)[:,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The best Decision Tree model still cannot outperform the best Logistic Regression model, so we should stick to Logistic Regression or try other models."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4) Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.8588\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8\" ><thead>    <tr>        <th class=\"col_heading level0 col0\" >Feature</th>        <th class=\"col_heading level0 col1\" >Importance</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row0_col0\" class=\"data row0 col0\" >date</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row0_col1\" class=\"data row0 col1\" >0.046322</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row1_col0\" class=\"data row1 col0\" >level</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row1_col1\" class=\"data row1 col1\" >0.014640</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row2_col0\" class=\"data row2 col0\" >speed</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row2_col1\" class=\"data row2 col1\" >0.129679</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row3_col0\" class=\"data row3 col0\" >max_load</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row3_col1\" class=\"data row3 col1\" >0.048448</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row4_col0\" class=\"data row4 col0\" >grid_distance</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row4_col1\" class=\"data row4 col1\" >0.350824</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row5_col0\" class=\"data row5 col0\" >urgency</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row5_col1\" class=\"data row5 col1\" >0.190431</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row6_col0\" class=\"data row6 col0\" >hour</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row6_col1\" class=\"data row6 col1\" >0.050842</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row7_col0\" class=\"data row7 col0\" >weather_grade_Bad Weather</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row7_col1\" class=\"data row7 col1\" >0.000119</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row8_col0\" class=\"data row8 col0\" >weather_grade_Slightly Bad Weather</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row8_col1\" class=\"data row8 col1\" >0.004143</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row9_col0\" class=\"data row9 col0\" >weather_grade_Very Bad Weather</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row9_col1\" class=\"data row9 col1\" >0.003516</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row10_col0\" class=\"data row10 col0\" >source_type_DELIVERY</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row10_col1\" class=\"data row10 col1\" >0.104924</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row11_col0\" class=\"data row11 col0\" >source_type_PICKUP</td>\n",
       "                        <td id=\"T_0a9f5314_9b02_11eb_8fd4_600308a139b8row11_col1\" class=\"data row11 col1\" >0.056113</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7ff1180beca0>"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Forest = RandomForestClassifier(n_estimators=100)\n",
    "Forest.fit(X_train, y_train)\n",
    "\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,Forest.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,Forest.predict_proba(X_test)[:,1]))\n",
    "df_feature_importance = pd.DataFrame({\n",
    "    'Feature': X_train.columns,\n",
    "    'Importance': Forest.feature_importances_\n",
    "})\n",
    "df_feature_importance.style.hide_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.8610\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8\" ><thead>    <tr>        <th class=\"col_heading level0 col0\" >Feature</th>        <th class=\"col_heading level0 col1\" >Importance</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row0_col0\" class=\"data row0 col0\" >date</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row0_col1\" class=\"data row0 col1\" >0.047075</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row1_col0\" class=\"data row1 col0\" >level</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row1_col1\" class=\"data row1 col1\" >0.014705</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row2_col0\" class=\"data row2 col0\" >speed</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row2_col1\" class=\"data row2 col1\" >0.129503</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row3_col0\" class=\"data row3 col0\" >max_load</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row3_col1\" class=\"data row3 col1\" >0.048846</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row4_col0\" class=\"data row4 col0\" >grid_distance</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row4_col1\" class=\"data row4 col1\" >0.346244</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row5_col0\" class=\"data row5 col0\" >urgency</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row5_col1\" class=\"data row5 col1\" >0.195895</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row6_col0\" class=\"data row6 col0\" >hour</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row6_col1\" class=\"data row6 col1\" >0.050460</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row7_col0\" class=\"data row7 col0\" >weather_grade_Bad Weather</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row7_col1\" class=\"data row7 col1\" >0.000121</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row8_col0\" class=\"data row8 col0\" >weather_grade_Slightly Bad Weather</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row8_col1\" class=\"data row8 col1\" >0.004294</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row9_col0\" class=\"data row9 col0\" >weather_grade_Very Bad Weather</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row9_col1\" class=\"data row9 col1\" >0.003629</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row10_col0\" class=\"data row10 col0\" >source_type_DELIVERY</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row10_col1\" class=\"data row10 col1\" >0.102706</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row11_col0\" class=\"data row11 col0\" >source_type_PICKUP</td>\n",
       "                        <td id=\"T_eff6dd1c_9b41_11eb_8fd4_600308a139b8row11_col1\" class=\"data row11 col1\" >0.056521</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fe82b70cd30>"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Forest = RandomForestClassifier(n_estimators=500)\n",
    "Forest.fit(X_train, y_train)\n",
    "\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,Forest.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,Forest.predict_proba(X_test)[:,1]))\n",
    "df_feature_importance = pd.DataFrame({\n",
    "    'Feature': X_train.columns,\n",
    "    'Importance': Forest.feature_importances_\n",
    "})\n",
    "df_feature_importance.style.hide_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.8611\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8\" ><thead>    <tr>        <th class=\"col_heading level0 col0\" >Feature</th>        <th class=\"col_heading level0 col1\" >Importance</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row0_col0\" class=\"data row0 col0\" >date</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row0_col1\" class=\"data row0 col1\" >0.046843</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row1_col0\" class=\"data row1 col0\" >level</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row1_col1\" class=\"data row1 col1\" >0.014578</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row2_col0\" class=\"data row2 col0\" >speed</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row2_col1\" class=\"data row2 col1\" >0.129500</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row3_col0\" class=\"data row3 col0\" >max_load</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row3_col1\" class=\"data row3 col1\" >0.048503</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row4_col0\" class=\"data row4 col0\" >grid_distance</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row4_col1\" class=\"data row4 col1\" >0.347500</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row5_col0\" class=\"data row5 col0\" >urgency</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row5_col1\" class=\"data row5 col1\" >0.196477</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row6_col0\" class=\"data row6 col0\" >hour</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row6_col1\" class=\"data row6 col1\" >0.051008</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row7_col0\" class=\"data row7 col0\" >weather_grade_Bad Weather</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row7_col1\" class=\"data row7 col1\" >0.000119</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row8_col0\" class=\"data row8 col0\" >weather_grade_Slightly Bad Weather</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row8_col1\" class=\"data row8 col1\" >0.004246</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row9_col0\" class=\"data row9 col0\" >weather_grade_Very Bad Weather</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row9_col1\" class=\"data row9 col1\" >0.003582</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row10_col0\" class=\"data row10 col0\" >source_type_DELIVERY</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row10_col1\" class=\"data row10 col1\" >0.100606</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row11_col0\" class=\"data row11 col0\" >source_type_PICKUP</td>\n",
       "                        <td id=\"T_11b63b98_9b04_11eb_8fd4_600308a139b8row11_col1\" class=\"data row11 col1\" >0.057039</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7ff0f6051a30>"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Forest = RandomForestClassifier(n_estimators=1000)\n",
    "Forest.fit(X_train, y_train)\n",
    "\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,Forest.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,Forest.predict_proba(X_test)[:,1]))\n",
    "df_feature_importance = pd.DataFrame({\n",
    "    'Feature': X_train.columns,\n",
    "    'Importance': Forest.feature_importances_\n",
    "})\n",
    "df_feature_importance.style.hide_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.8620\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=11\n",
    "pca_forest = make_pipeline(PCA(n_components=11),RandomForestClassifier(n_estimators=500))\n",
    "pca_forest.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_forest.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_forest.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.8614\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=10\n",
    "pca_forest = make_pipeline(PCA(n_components=10),RandomForestClassifier(n_estimators=500))\n",
    "pca_forest.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_forest.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_forest.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##PCA with n_components=8\n",
    "pca_forest = make_pipeline(PCA(n_components=8),RandomForestClassifier(n_estimators=1000))\n",
    "pca_forest.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_forest.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_forest.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##PCA with n_components=6\n",
    "pca_forest = make_pipeline(PCA(n_components=6),RandomForestClassifier(n_estimators=1000))\n",
    "pca_forest.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_forest.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_forest.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.8634\n"
     ]
    }
   ],
   "source": [
    "pca_forest = make_pipeline(PolynomialFeatures(degree=2),RandomForestClassifier(n_estimators=500))\n",
    "pca_forest.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_forest.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_forest.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC is: 1.0000\n",
      "The out-of-sample ROC-AUC is: 0.8626\n"
     ]
    }
   ],
   "source": [
    "pca_forest = make_pipeline(PolynomialFeatures(degree=3),RandomForestClassifier(n_estimators=500))\n",
    "pca_forest.fit(X_train, y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,pca_forest.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,pca_forest.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample ROC-AUC of the entire training set is: 0.9811\n"
     ]
    }
   ],
   "source": [
    "pca_forest = make_pipeline(PolynomialFeatures(degree=2),RandomForestClassifier(n_estimators=500))\n",
    "pca_forest.fit(X, y)\n",
    "print('The in-sample ROC-AUC of the entire training set is: %0.4f' % roc_auc_score(y,Forest.predict_proba(X)[:,1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5) XGBT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [],
   "source": [
    "X3 = df.drop(columns = ['expected_use_time','action_type_DELIVERY','courier_id', 'wave_index', 'tracking_id', 'group', 'id','aoi_id','shop_id'])\n",
    "y3 = np.array(df['action_type_DELIVERY'])\n",
    "# Split dataframe_train into training and testing sets.\n",
    "from sklearn.model_selection import train_test_split as tr_te_split\n",
    "X3_train, X3_test, y3_train, y3_test = tr_te_split(X3, y3,stratify=y3,random_state=666,test_size=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:50:38] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9169\n",
      "The out-of-sample ROC-AUC is: 0.9033\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'urgency': 60.593467877835906,\n",
       " 'grid_distance': 223.3630622757475,\n",
       " 'source_type_PICKUP': 937.8401364060677,\n",
       " 'source_type_DELIVERY': 2355.2523817723713,\n",
       " 'source_lat': 7.832943624668484,\n",
       " 'courier_wave_start_lng': 7.582075971831277,\n",
       " 'courier_wave_start_lat': 9.176725048708068,\n",
       " 'date': 4.405998824766511,\n",
       " 'target_lat': 17.737593895442206,\n",
       " 'hour': 8.062561488662547,\n",
       " 'level': 5.6575425320924415,\n",
       " 'max_load': 5.827971530276544,\n",
       " 'speed': 3.673242464255588,\n",
       " 'target_lng': 18.285834146332665,\n",
       " 'source_lng': 7.726666828283276,\n",
       " 'weather_grade_Very Bad Weather': 8.024113242911762,\n",
       " 'source_tracking_id': 3.1924245559130426,\n",
       " 'weather_grade_Slightly Bad Weather': 2.586248580503077}"
      ]
     },
     "execution_count": 274,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train3 = xgb.DMatrix(data=X3_train,label= y3_train)\n",
    "data_test3 = xgb.DMatrix(data=X3_test,label= y3_test)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False)\n",
    "xgbt.fit(X3_train,y3_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_train,xgbt.predict_proba(X3_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_test,xgbt.predict_proba(X3_test)[:,1]))\n",
    "xgbt.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:52:05] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9433\n",
      "The out-of-sample ROC-AUC is: 0.9281\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'urgency': 49.00782503383232,\n",
       " 'grid_distance': 171.0519416709743,\n",
       " 'source_type_PICKUP': 754.0632534604257,\n",
       " 'source_type_DELIVERY': 1841.581996766718,\n",
       " 'source_lat': 8.445101707094848,\n",
       " 'courier_wave_start_lng': 10.072800332955296,\n",
       " 'courier_wave_start_lat': 11.771227221871223,\n",
       " 'date': 4.1556980554127,\n",
       " 'target_lat': 20.937642743643575,\n",
       " 'hour': 7.357942163651148,\n",
       " 'level': 5.7021872115308865,\n",
       " 'max_load': 6.057230395808586,\n",
       " 'speed': 3.5436009519575395,\n",
       " 'target_lng': 22.40892777706727,\n",
       " 'source_lng': 8.399517707477505,\n",
       " 'weather_grade_Very Bad Weather': 7.4737857108571415,\n",
       " 'source_tracking_id': 2.970677079857142,\n",
       " 'weather_grade_Slightly Bad Weather': 2.6031956144939032}"
      ]
     },
     "execution_count": 275,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train3 = xgb.DMatrix(data=X3_train,label= y3_train)\n",
    "data_test3 = xgb.DMatrix(data=X3_test,label= y3_test)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 80,use_label_encoder=False)\n",
    "xgbt.fit(X3_train,y3_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_train,xgbt.predict_proba(X3_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_test,xgbt.predict_proba(X3_test)[:,1]))\n",
    "xgbt.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:53:15] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9552\n",
      "The out-of-sample ROC-AUC is: 0.9392\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'urgency': 42.495178423402876,\n",
       " 'grid_distance': 146.44313732654473,\n",
       " 'source_type_PICKUP': 643.3602642812042,\n",
       " 'source_type_DELIVERY': 1602.4444476526253,\n",
       " 'source_lat': 8.49949435899833,\n",
       " 'courier_wave_start_lng': 10.468501425161557,\n",
       " 'courier_wave_start_lat': 11.649225809916084,\n",
       " 'date': 3.931908252895458,\n",
       " 'target_lat': 20.902471888750853,\n",
       " 'hour': 6.912027606753819,\n",
       " 'level': 5.557552625093909,\n",
       " 'max_load': 5.921400687055316,\n",
       " 'speed': 3.4556372447734907,\n",
       " 'target_lng': 21.818533365531138,\n",
       " 'source_lng': 8.182964219979358,\n",
       " 'weather_grade_Very Bad Weather': 7.1777515568764025,\n",
       " 'source_tracking_id': 3.0545662846020396,\n",
       " 'weather_grade_Slightly Bad Weather': 2.586837703457292}"
      ]
     },
     "execution_count": 276,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train3 = xgb.DMatrix(data=X3_train,label= y3_train)\n",
    "data_test3 = xgb.DMatrix(data=X3_test,label= y3_test)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 100,use_label_encoder=False)\n",
    "xgbt.fit(X3_train,y3_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_train,xgbt.predict_proba(X3_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_test,xgbt.predict_proba(X3_test)[:,1]))\n",
    "xgbt.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:57:59] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9946\n",
      "The out-of-sample ROC-AUC is: 0.9788\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'grid_distance': 46.913944899090865,\n",
       " 'source_type_DELIVERY': 1493.7420022032504,\n",
       " 'source_lat': 5.551475838863768,\n",
       " 'urgency': 8.548472682907914,\n",
       " 'courier_wave_start_lng': 7.26686053959509,\n",
       " 'courier_wave_start_lat': 8.55911356477118,\n",
       " 'date': 2.8468351761083457,\n",
       " 'source_type_PICKUP': 933.854771226097,\n",
       " 'target_lat': 15.388770504024267,\n",
       " 'level': 3.531966586076848,\n",
       " 'hour': 3.9811416258104457,\n",
       " 'source_lng': 5.347450677896653,\n",
       " 'weather_grade_Slightly Bad Weather': 1.9666111392867882,\n",
       " 'target_lng': 15.650871836758121,\n",
       " 'speed': 2.7833376282881894,\n",
       " 'max_load': 4.211749958637748,\n",
       " 'weather_grade_Very Bad Weather': 4.591040850337694,\n",
       " 'source_tracking_id': 3.1888897939400005,\n",
       " 'weather_grade_Bad Weather': 6.20519543}"
      ]
     },
     "execution_count": 284,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train3 = xgb.DMatrix(data=X3_train,label= y3_train)\n",
    "data_test3 = xgb.DMatrix(data=X3_test,label= y3_test)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic',\n",
    "                max_depth = 10, n_estimators = 150,use_label_encoder=False)\n",
    "xgbt.fit(X3_train,y3_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_train,xgbt.predict_proba(X3_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_test,xgbt.predict_proba(X3_test)[:,1]))\n",
    "xgbt.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:59:13] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9970\n",
      "The out-of-sample ROC-AUC is: 0.9824\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'grid_distance': 39.28850916308538,\n",
       " 'source_type_DELIVERY': 1416.9973916959798,\n",
       " 'source_lat': 4.9936943286032,\n",
       " 'urgency': 7.307682536540924,\n",
       " 'courier_wave_start_lng': 6.496998949081515,\n",
       " 'courier_wave_start_lat': 7.6163487594568196,\n",
       " 'date': 2.5920521127444256,\n",
       " 'source_type_PICKUP': 829.3568013077497,\n",
       " 'target_lat': 13.893511902022142,\n",
       " 'level': 3.2110391398220535,\n",
       " 'hour': 3.547919037508172,\n",
       " 'source_lng': 4.850622136704796,\n",
       " 'weather_grade_Slightly Bad Weather': 1.9229573524947963,\n",
       " 'target_lng': 14.030471651914066,\n",
       " 'speed': 2.568680201879251,\n",
       " 'max_load': 3.866654363404075,\n",
       " 'weather_grade_Very Bad Weather': 4.195394561136603,\n",
       " 'source_tracking_id': 2.6932999155774664,\n",
       " 'weather_grade_Bad Weather': 6.20519543}"
      ]
     },
     "execution_count": 285,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train3 = xgb.DMatrix(data=X3_train,label= y3_train)\n",
    "data_test3 = xgb.DMatrix(data=X3_test,label= y3_test)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic',\n",
    "                max_depth = 10, n_estimators = 200,use_label_encoder=False)\n",
    "xgbt.fit(X3_train,y3_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_train,xgbt.predict_proba(X3_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_test,xgbt.predict_proba(X3_test)[:,1]))\n",
    "xgbt.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23:04:13] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9983\n",
      "The out-of-sample ROC-AUC is: 0.9846\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'grid_distance': 33.95702791883356,\n",
       " 'source_type_DELIVERY': 1347.5710027200298,\n",
       " 'source_lat': 4.58028236406589,\n",
       " 'urgency': 6.474695431220009,\n",
       " 'courier_wave_start_lng': 5.936922292866901,\n",
       " 'courier_wave_start_lat': 6.896152085452523,\n",
       " 'date': 2.410039484925066,\n",
       " 'source_type_PICKUP': 788.6982875626144,\n",
       " 'target_lat': 12.591816555235406,\n",
       " 'level': 2.9834046361504134,\n",
       " 'hour': 3.213913683261198,\n",
       " 'source_lng': 4.4448735884537,\n",
       " 'weather_grade_Slightly Bad Weather': 1.817302195169115,\n",
       " 'target_lng': 12.749842720027459,\n",
       " 'speed': 2.3977564478386464,\n",
       " 'max_load': 3.614434780474911,\n",
       " 'weather_grade_Very Bad Weather': 3.8766815228582394,\n",
       " 'source_tracking_id': 2.49640308337805,\n",
       " 'weather_grade_Bad Weather': 3.306180896}"
      ]
     },
     "execution_count": 292,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train3 = xgb.DMatrix(data=X3_train,label= y3_train)\n",
    "data_test3 = xgb.DMatrix(data=X3_test,label= y3_test)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic',\n",
    "                max_depth = 10, n_estimators = 250,use_label_encoder=False)\n",
    "xgbt.fit(X3_train,y3_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_train,xgbt.predict_proba(X3_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_test,xgbt.predict_proba(X3_test)[:,1]))\n",
    "xgbt.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23:09:14] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9991\n",
      "The out-of-sample ROC-AUC is: 0.9863\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'grid_distance': 29.35232902043339,\n",
       " 'source_type_DELIVERY': 1261.1418970872032,\n",
       " 'source_lat': 4.1482242297941445,\n",
       " 'urgency': 5.759129611935794,\n",
       " 'courier_wave_start_lng': 5.396549140789277,\n",
       " 'courier_wave_start_lat': 6.222937313277635,\n",
       " 'date': 2.2217052150104566,\n",
       " 'source_type_PICKUP': 729.0629126411845,\n",
       " 'target_lat': 11.550335418838928,\n",
       " 'level': 2.8091721511455163,\n",
       " 'hour': 2.920309147189803,\n",
       " 'source_lng': 4.088626193795217,\n",
       " 'weather_grade_Slightly Bad Weather': 1.7533051250555145,\n",
       " 'target_lng': 11.783400174367417,\n",
       " 'speed': 2.246793156965733,\n",
       " 'max_load': 3.290346310326195,\n",
       " 'weather_grade_Very Bad Weather': 3.607433078877131,\n",
       " 'source_tracking_id': 2.3179130771020424,\n",
       " 'weather_grade_Bad Weather': 2.324040583}"
      ]
     },
     "execution_count": 293,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train3 = xgb.DMatrix(data=X3_train,label= y3_train)\n",
    "data_test3 = xgb.DMatrix(data=X3_test,label= y3_test)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic',\n",
    "                max_depth = 10, n_estimators = 300,use_label_encoder=False)\n",
    "xgbt.fit(X3_train,y3_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_train,xgbt.predict_proba(X3_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y3_test,xgbt.predict_proba(X3_test)[:,1]))\n",
    "xgbt.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[04:36:36] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9193\n",
      "The out-of-sample ROC-AUC is: 0.9081\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'expected_use_time': 73.59675893961004,\n",
       " 'source_type_DELIVERY': 1407.9009290518368,\n",
       " 'urgency': 36.737594917794375,\n",
       " 'grid_distance': 72.99144743094811,\n",
       " 'date': 5.061069154554071,\n",
       " 'speed': 3.534120955010961,\n",
       " 'hour': 5.964867935594396,\n",
       " 'max_load': 4.426336182373787,\n",
       " 'level': 4.598070274786016,\n",
       " 'source_type_PICKUP': 877.4910315715628,\n",
       " 'weather_grade_Very Bad Weather': 7.354673977372361,\n",
       " 'weather_grade_Slightly Bad Weather': 2.923704802888235}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X_train,label= y_train)\n",
    "data_test = xgb.DMatrix(data=X_test,label= y_test)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False)\n",
    "xgbt.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt.predict_proba(X_test)[:,1]))\n",
    "xgbt.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best n_neighbor is {'gamma': 0.001, 'max_depth': 10, 'n_estimators': 50}\n",
      "The in-sample ROC-AUC is 0.9080\n"
     ]
    }
   ],
   "source": [
    "grid_xgbt = GridSearchCV(xgb.XGBClassifier(objective = 'binary:logistic',\n",
    "                                           use_label_encoder=False, \n",
    "                                           eval_metric='logloss',\n",
    "                                           colsample_bynode=0.8,\n",
    "                                           learning_rate=0.1),\n",
    "                                           [{'max_depth':[10,50],'gamma':[0.001,0.01], 'n_estimators': [50,100]}],\n",
    "                         scoring = 'roc_auc',cv=5)\n",
    "grid_xgbt.fit(X_train,y_train)\n",
    "print(\"The best n_neighbor is\",grid_xgbt.best_params_)\n",
    "print(\"The in-sample ROC-AUC is %0.4f\" % grid_xgbt.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23:24:27] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9173\n",
      "The out-of-sample ROC-AUC is: 0.9074\n"
     ]
    }
   ],
   "source": [
    "xgbt_clf = make_pipeline(PCA(n_components=12),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt_clf.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt_clf.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt_clf.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23:26:48] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9221\n",
      "The out-of-sample ROC-AUC is: 0.9076\n"
     ]
    }
   ],
   "source": [
    "xgbt_clf = make_pipeline(PCA(n_components=11),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt_clf.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt_clf.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt_clf.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23:25:22] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9217\n",
      "The out-of-sample ROC-AUC is: 0.9077\n"
     ]
    }
   ],
   "source": [
    "xgbt_clf = make_pipeline(PCA(n_components=10),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt_clf.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt_clf.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt_clf.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23:27:12] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9209\n",
      "The out-of-sample ROC-AUC is: 0.9076\n"
     ]
    }
   ],
   "source": [
    "xgbt_clf = make_pipeline(PCA(n_components=9),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt_clf.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt_clf.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt_clf.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23:26:13] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9204\n",
      "The out-of-sample ROC-AUC is: 0.9075\n"
     ]
    }
   ],
   "source": [
    "xgbt_clf = make_pipeline(PCA(n_components=8),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt_clf.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt_clf.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt_clf.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23:29:52] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC of the entire training set is: 0.9170\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'expected_use_time': 98.62399326496883,\n",
       " 'source_type_DELIVERY': 1959.8669906547461,\n",
       " 'urgency': 46.722503137381466,\n",
       " 'grid_distance': 95.68497395863488,\n",
       " 'max_load': 5.259205126096014,\n",
       " 'speed': 3.942289891256865,\n",
       " 'level': 5.168129379606883,\n",
       " 'hour': 7.177738498698777,\n",
       " 'date': 5.975119235398241,\n",
       " 'source_type_PICKUP': 1294.6704680500193,\n",
       " 'weather_grade_Very Bad Weather': 7.981509138901365,\n",
       " 'weather_grade_Slightly Bad Weather': 2.394068056666668,\n",
       " 'weather_grade_Bad Weather': 8.64577579}"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X,label= y)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False)\n",
    "xgbt.fit(X,y)\n",
    "print('The in-sample ROC-AUC of the entire training set is: %0.4f' % roc_auc_score(y,xgbt.predict_proba(X)[:,1]))\n",
    "xgbt.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_without_time = df.drop(columns = ['action_type_DELIVERY','expected_use_time','courier_id', 'wave_index', 'tracking_id', 'group', 'id','aoi_id','shop_id','courier_wave_start_lng', 'courier_wave_start_lat','source_tracking_id','source_lng','source_lat','target_lng','target_lat'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_without_time = X_train.drop(columns ='expected_use_time')\n",
    "X_test_without_time = X_test.drop(columns ='expected_use_time')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23:57:24] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.8899\n",
      "The out-of-sample ROC-AUC is: 0.8737\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'grid_distance': 89.57965840629618,\n",
       " 'source_type_DELIVERY': 1696.065783142196,\n",
       " 'source_type_PICKUP': 1027.2254775529761,\n",
       " 'speed': 3.6712392151557602,\n",
       " 'hour': 5.268452584234548,\n",
       " 'max_load': 3.977311069319779,\n",
       " 'date': 3.4811899593737095,\n",
       " 'urgency': 18.066252902780548,\n",
       " 'weather_grade_Very Bad Weather': 5.509472817473009,\n",
       " 'level': 3.9082355030294913,\n",
       " 'weather_grade_Slightly Bad Weather': 2.9445667041565184,\n",
       " 'weather_grade_Bad Weather': 4.80474138}"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train_without_time = xgb.DMatrix(data=X_train_without_time,label= y_train)\n",
    "data_test_without_time = xgb.DMatrix(data=X_test_without_time,label= y_test)\n",
    "xgbt_without_time = xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False)\n",
    "xgbt_without_time.fit(X_train_without_time,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt_without_time.predict_proba(X_train_without_time)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt_without_time.predict_proba(X_test_without_time)[:,1]))\n",
    "xgbt_without_time.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[00:02:11] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC of the entire training set is: 0.8863\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'grid_distance': 117.09802750410483,\n",
       " 'source_type_DELIVERY': 2308.161693972491,\n",
       " 'source_type_PICKUP': 1413.3672468852806,\n",
       " 'level': 4.203737228535511,\n",
       " 'hour': 6.050988273067498,\n",
       " 'max_load': 4.485262709268762,\n",
       " 'urgency': 22.91367266471948,\n",
       " 'date': 4.018760840328286,\n",
       " 'weather_grade_Slightly Bad Weather': 3.274251536338238,\n",
       " 'speed': 3.7282464491171137,\n",
       " 'weather_grade_Very Bad Weather': 6.107819482534398,\n",
       " 'weather_grade_Bad Weather': 3.195790885}"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train_without_time = xgb.DMatrix(data=X_without_time,label= y)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False)\n",
    "xgbt.fit(X_without_time,y)\n",
    "print('The in-sample ROC-AUC of the entire training set is: %0.4f' % roc_auc_score(y,xgbt.predict_proba(X_without_time)[:,1]))\n",
    "xgbt.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11:29:17] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.8875\n",
      "The out-of-sample ROC-AUC is: 0.8735\n"
     ]
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X_train,label= y_train)\n",
    "data_test = xgb.DMatrix(data=X_test,label= y_test)\n",
    "xgbt = make_pipeline(PCA(n_components=11),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11:30:06] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.8910\n",
      "The out-of-sample ROC-AUC is: 0.8733\n"
     ]
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X_train,label= y_train)\n",
    "data_test = xgb.DMatrix(data=X_test,label= y_test)\n",
    "xgbt = make_pipeline(PCA(n_components=10),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:35:05] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.8917\n",
      "The out-of-sample ROC-AUC is: 0.8733\n"
     ]
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X_train,label= y_train)\n",
    "data_test = xgb.DMatrix(data=X_test,label= y_test)\n",
    "xgbt = make_pipeline(PCA(n_components=9),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:35:46] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.8909\n",
      "The out-of-sample ROC-AUC is: 0.8733\n"
     ]
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X_train,label= y_train)\n",
    "data_test = xgb.DMatrix(data=X_test,label= y_test)\n",
    "xgbt = make_pipeline(PCA(n_components=8),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:36:18] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.8896\n",
      "The out-of-sample ROC-AUC is: 0.8733\n"
     ]
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X_train,label= y_train)\n",
    "data_test = xgb.DMatrix(data=X_test,label= y_test)\n",
    "xgbt = make_pipeline(PCA(n_components=7),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:36:43] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.8453\n",
      "The out-of-sample ROC-AUC is: 0.8215\n"
     ]
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X_train,label= y_train)\n",
    "data_test = xgb.DMatrix(data=X_test,label= y_test)\n",
    "xgbt = make_pipeline(PCA(n_components=6),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:37:14] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.8366\n",
      "The out-of-sample ROC-AUC is: 0.8144\n"
     ]
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X_train,label= y_train)\n",
    "data_test = xgb.DMatrix(data=X_test,label= y_test)\n",
    "xgbt = make_pipeline(PCA(n_components=5),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11:32:55] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.8959\n",
      "The out-of-sample ROC-AUC is: 0.8734\n"
     ]
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X_train,label= y_train)\n",
    "data_test = xgb.DMatrix(data=X_test,label= y_test)\n",
    "xgbt = make_pipeline(PolynomialFeatures(degree=2),xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:20:22] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.8899\n",
      "The out-of-sample ROC-AUC is: 0.8737\n"
     ]
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X_train,label= y_train)\n",
    "data_test = xgb.DMatrix(data=X_test,label= y_test)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False)\n",
    "xgbt.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:44:07] WARNING: /Users/travis/build/dmlc/xgboost/src/learner.cc:1061: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'binary:logistic' was changed from 'error' to 'logloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "The in-sample ROC-AUC is: 0.9150\n",
      "The out-of-sample ROC-AUC is: 0.8684\n"
     ]
    }
   ],
   "source": [
    "data_train = xgb.DMatrix(data=X_train,label= y_train)\n",
    "data_test = xgb.DMatrix(data=X_test,label= y_test)\n",
    "xgbt = xgb.XGBClassifier(objective ='binary:logistic',\n",
    "                max_depth = 10, n_estimators = 80,use_label_encoder=False)\n",
    "xgbt.fit(X_train,y_train)\n",
    "print('The in-sample ROC-AUC is: %0.4f' % roc_auc_score(y_train,xgbt.predict_proba(X_train)[:,1]))\n",
    "print('The out-of-sample ROC-AUC is: %0.4f' % roc_auc_score(y_test,xgbt.predict_proba(X_test)[:,1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>courier_id</th>\n",
       "      <th>wave_index</th>\n",
       "      <th>tracking_id</th>\n",
       "      <th>courier_wave_start_lng</th>\n",
       "      <th>courier_wave_start_lat</th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>level</th>\n",
       "      <th>speed</th>\n",
       "      <th>max_load</th>\n",
       "      <th>...</th>\n",
       "      <th>target_lat</th>\n",
       "      <th>grid_distance</th>\n",
       "      <th>urgency</th>\n",
       "      <th>hour</th>\n",
       "      <th>weather_grade_Bad Weather</th>\n",
       "      <th>weather_grade_Slightly Bad Weather</th>\n",
       "      <th>weather_grade_Very Bad Weather</th>\n",
       "      <th>source_type_2.10E+18</th>\n",
       "      <th>source_type_DELIVERY</th>\n",
       "      <th>source_type_PICKUP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.144603</td>\n",
       "      <td>796.0</td>\n",
       "      <td>1776</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.150661</td>\n",
       "      <td>1048.0</td>\n",
       "      <td>697</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.144603</td>\n",
       "      <td>1019.0</td>\n",
       "      <td>1756</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.152711</td>\n",
       "      <td>1198.0</td>\n",
       "      <td>676</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.142762</td>\n",
       "      <td>1275.0</td>\n",
       "      <td>2336</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   courier_id  wave_index   tracking_id  courier_wave_start_lng  \\\n",
       "0    10007871           2  2.100000e+18              121.630558   \n",
       "1    10007871           2  2.100000e+18              121.630558   \n",
       "2    10007871           2  2.100000e+18              121.630558   \n",
       "3    10007871           2  2.100000e+18              121.630558   \n",
       "4    10007871           2  2.100000e+18              121.630558   \n",
       "\n",
       "   courier_wave_start_lat      date         group  level     speed  max_load  \\\n",
       "0                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "1                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "2                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "3                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "4                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "\n",
       "   ... target_lat grid_distance urgency  hour  weather_grade_Bad Weather  \\\n",
       "0  ...  39.144603         796.0    1776  13.0                          0   \n",
       "1  ...  39.150661        1048.0     697  13.0                          0   \n",
       "2  ...  39.144603        1019.0    1756  13.0                          0   \n",
       "3  ...  39.152711        1198.0     676  13.0                          0   \n",
       "4  ...  39.142762        1275.0    2336  14.0                          0   \n",
       "\n",
       "   weather_grade_Slightly Bad Weather  weather_grade_Very Bad Weather  \\\n",
       "0                                   0                               0   \n",
       "1                                   0                               0   \n",
       "2                                   0                               0   \n",
       "3                                   0                               0   \n",
       "4                                   0                               0   \n",
       "\n",
       "   source_type_2.10E+18  source_type_DELIVERY  source_type_PICKUP  \n",
       "0                     0                     0                   0  \n",
       "1                     0                     0                   1  \n",
       "2                     0                     1                   0  \n",
       "3                     0                     0                   1  \n",
       "4                     0                     1                   0  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_clf = pd.read_csv('dataframe_test.csv')\n",
    "test_clf = pd.get_dummies(test_clf, columns=['weather_grade','source_type'],drop_first=False)\n",
    "test_clf = test_clf.drop(columns = ['weather_grade_Normal Weather','source_type_ASSIGN'])\n",
    "test_clf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_clf = test_clf.drop(columns = ['source_type_2.10E+18','courier_id', 'wave_index', 'tracking_id', 'group', 'id','aoi_id','shop_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>courier_wave_start_lng</th>\n",
       "      <th>courier_wave_start_lat</th>\n",
       "      <th>date</th>\n",
       "      <th>level</th>\n",
       "      <th>speed</th>\n",
       "      <th>max_load</th>\n",
       "      <th>source_tracking_id</th>\n",
       "      <th>source_lng</th>\n",
       "      <th>source_lat</th>\n",
       "      <th>target_lng</th>\n",
       "      <th>target_lat</th>\n",
       "      <th>grid_distance</th>\n",
       "      <th>urgency</th>\n",
       "      <th>hour</th>\n",
       "      <th>weather_grade_Bad Weather</th>\n",
       "      <th>weather_grade_Slightly Bad Weather</th>\n",
       "      <th>weather_grade_Very Bad Weather</th>\n",
       "      <th>source_type_DELIVERY</th>\n",
       "      <th>source_type_PICKUP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.140900</td>\n",
       "      <td>20200228</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.140900</td>\n",
       "      <td>121.629930</td>\n",
       "      <td>39.144603</td>\n",
       "      <td>796.0</td>\n",
       "      <td>1776</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.140900</td>\n",
       "      <td>20200228</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.629930</td>\n",
       "      <td>39.144603</td>\n",
       "      <td>121.629604</td>\n",
       "      <td>39.150661</td>\n",
       "      <td>1048.0</td>\n",
       "      <td>697</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.140900</td>\n",
       "      <td>20200228</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.629604</td>\n",
       "      <td>39.150661</td>\n",
       "      <td>121.629930</td>\n",
       "      <td>39.144603</td>\n",
       "      <td>1019.0</td>\n",
       "      <td>1756</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.140900</td>\n",
       "      <td>20200228</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.629930</td>\n",
       "      <td>39.144603</td>\n",
       "      <td>121.630544</td>\n",
       "      <td>39.152711</td>\n",
       "      <td>1198.0</td>\n",
       "      <td>676</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.140900</td>\n",
       "      <td>20200228</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630544</td>\n",
       "      <td>39.152711</td>\n",
       "      <td>121.631446</td>\n",
       "      <td>39.142762</td>\n",
       "      <td>1275.0</td>\n",
       "      <td>2336</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25463</th>\n",
       "      <td>121.447895</td>\n",
       "      <td>39.210704</td>\n",
       "      <td>20200228</td>\n",
       "      <td>3</td>\n",
       "      <td>5.681500</td>\n",
       "      <td>11</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.457034</td>\n",
       "      <td>39.217461</td>\n",
       "      <td>121.453294</td>\n",
       "      <td>39.214381</td>\n",
       "      <td>703.0</td>\n",
       "      <td>3872</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25464</th>\n",
       "      <td>121.453580</td>\n",
       "      <td>39.205943</td>\n",
       "      <td>20200228</td>\n",
       "      <td>3</td>\n",
       "      <td>5.681500</td>\n",
       "      <td>11</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.453580</td>\n",
       "      <td>39.205943</td>\n",
       "      <td>121.450119</td>\n",
       "      <td>39.209546</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>2043</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25465</th>\n",
       "      <td>121.453580</td>\n",
       "      <td>39.205943</td>\n",
       "      <td>20200228</td>\n",
       "      <td>3</td>\n",
       "      <td>5.681500</td>\n",
       "      <td>11</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.450119</td>\n",
       "      <td>39.209546</td>\n",
       "      <td>121.450644</td>\n",
       "      <td>39.207601</td>\n",
       "      <td>233.0</td>\n",
       "      <td>1204</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25466</th>\n",
       "      <td>121.453580</td>\n",
       "      <td>39.205943</td>\n",
       "      <td>20200228</td>\n",
       "      <td>3</td>\n",
       "      <td>5.681500</td>\n",
       "      <td>11</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.450644</td>\n",
       "      <td>39.207601</td>\n",
       "      <td>121.452471</td>\n",
       "      <td>39.209303</td>\n",
       "      <td>720.0</td>\n",
       "      <td>2948</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25467</th>\n",
       "      <td>121.453580</td>\n",
       "      <td>39.205943</td>\n",
       "      <td>20200228</td>\n",
       "      <td>3</td>\n",
       "      <td>5.681500</td>\n",
       "      <td>11</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.452471</td>\n",
       "      <td>39.209303</td>\n",
       "      <td>121.451934</td>\n",
       "      <td>39.197651</td>\n",
       "      <td>2887.0</td>\n",
       "      <td>971</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>25468 rows Ã— 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       courier_wave_start_lng  courier_wave_start_lat      date  level  \\\n",
       "0                  121.630558               39.140900  20200228      3   \n",
       "1                  121.630558               39.140900  20200228      3   \n",
       "2                  121.630558               39.140900  20200228      3   \n",
       "3                  121.630558               39.140900  20200228      3   \n",
       "4                  121.630558               39.140900  20200228      3   \n",
       "...                       ...                     ...       ...    ...   \n",
       "25463              121.447895               39.210704  20200228      3   \n",
       "25464              121.453580               39.205943  20200228      3   \n",
       "25465              121.453580               39.205943  20200228      3   \n",
       "25466              121.453580               39.205943  20200228      3   \n",
       "25467              121.453580               39.205943  20200228      3   \n",
       "\n",
       "          speed  max_load  source_tracking_id  source_lng  source_lat  \\\n",
       "0      5.535851        11        2.100000e+18  121.630558   39.140900   \n",
       "1      5.535851        11        2.100000e+18  121.629930   39.144603   \n",
       "2      5.535851        11        2.100000e+18  121.629604   39.150661   \n",
       "3      5.535851        11        2.100000e+18  121.629930   39.144603   \n",
       "4      5.535851        11        2.100000e+18  121.630544   39.152711   \n",
       "...         ...       ...                 ...         ...         ...   \n",
       "25463  5.681500        11        2.100000e+18  121.457034   39.217461   \n",
       "25464  5.681500        11        2.100000e+18  121.453580   39.205943   \n",
       "25465  5.681500        11        2.100000e+18  121.450119   39.209546   \n",
       "25466  5.681500        11        2.100000e+18  121.450644   39.207601   \n",
       "25467  5.681500        11        2.100000e+18  121.452471   39.209303   \n",
       "\n",
       "       target_lng  target_lat  grid_distance  urgency  hour  \\\n",
       "0      121.629930   39.144603          796.0     1776  13.0   \n",
       "1      121.629604   39.150661         1048.0      697  13.0   \n",
       "2      121.629930   39.144603         1019.0     1756  13.0   \n",
       "3      121.630544   39.152711         1198.0      676  13.0   \n",
       "4      121.631446   39.142762         1275.0     2336  14.0   \n",
       "...           ...         ...            ...      ...   ...   \n",
       "25463  121.453294   39.214381          703.0     3872  19.0   \n",
       "25464  121.450119   39.209546         1297.0     2043  19.0   \n",
       "25465  121.450644   39.207601          233.0     1204  19.0   \n",
       "25466  121.452471   39.209303          720.0     2948  19.0   \n",
       "25467  121.451934   39.197651         2887.0      971  20.0   \n",
       "\n",
       "       weather_grade_Bad Weather  weather_grade_Slightly Bad Weather  \\\n",
       "0                              0                                   0   \n",
       "1                              0                                   0   \n",
       "2                              0                                   0   \n",
       "3                              0                                   0   \n",
       "4                              0                                   0   \n",
       "...                          ...                                 ...   \n",
       "25463                          0                                   0   \n",
       "25464                          0                                   0   \n",
       "25465                          0                                   0   \n",
       "25466                          0                                   0   \n",
       "25467                          0                                   0   \n",
       "\n",
       "       weather_grade_Very Bad Weather  source_type_DELIVERY  \\\n",
       "0                                   0                     0   \n",
       "1                                   0                     0   \n",
       "2                                   0                     1   \n",
       "3                                   0                     0   \n",
       "4                                   0                     1   \n",
       "...                               ...                   ...   \n",
       "25463                               0                     1   \n",
       "25464                               0                     0   \n",
       "25465                               0                     0   \n",
       "25466                               0                     1   \n",
       "25467                               0                     0   \n",
       "\n",
       "       source_type_PICKUP  \n",
       "0                       0  \n",
       "1                       1  \n",
       "2                       0  \n",
       "3                       1  \n",
       "4                       0  \n",
       "...                   ...  \n",
       "25463                   0  \n",
       "25464                   0  \n",
       "25465                   1  \n",
       "25466                   0  \n",
       "25467                   1  \n",
       "\n",
       "[25468 rows x 19 columns]"
      ]
     },
     "execution_count": 296,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test_clf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>courier_id</th>\n",
       "      <th>wave_index</th>\n",
       "      <th>tracking_id</th>\n",
       "      <th>courier_wave_start_lng</th>\n",
       "      <th>courier_wave_start_lat</th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>level</th>\n",
       "      <th>speed</th>\n",
       "      <th>max_load</th>\n",
       "      <th>...</th>\n",
       "      <th>grid_distance</th>\n",
       "      <th>urgency</th>\n",
       "      <th>hour</th>\n",
       "      <th>weather_grade_Bad Weather</th>\n",
       "      <th>weather_grade_Slightly Bad Weather</th>\n",
       "      <th>weather_grade_Very Bad Weather</th>\n",
       "      <th>source_type_2.10E+18</th>\n",
       "      <th>source_type_DELIVERY</th>\n",
       "      <th>source_type_PICKUP</th>\n",
       "      <th>action_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>796.0</td>\n",
       "      <td>1776</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1048.0</td>\n",
       "      <td>697</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1019.0</td>\n",
       "      <td>1756</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1198.0</td>\n",
       "      <td>676</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1275.0</td>\n",
       "      <td>2336</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   courier_id  wave_index   tracking_id  courier_wave_start_lng  \\\n",
       "0    10007871           2  2.100000e+18              121.630558   \n",
       "1    10007871           2  2.100000e+18              121.630558   \n",
       "2    10007871           2  2.100000e+18              121.630558   \n",
       "3    10007871           2  2.100000e+18              121.630558   \n",
       "4    10007871           2  2.100000e+18              121.630558   \n",
       "\n",
       "   courier_wave_start_lat      date         group  level     speed  max_load  \\\n",
       "0                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "1                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "2                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "3                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "4                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "\n",
       "   ... grid_distance urgency  hour  weather_grade_Bad Weather  \\\n",
       "0  ...         796.0    1776  13.0                          0   \n",
       "1  ...        1048.0     697  13.0                          0   \n",
       "2  ...        1019.0    1756  13.0                          0   \n",
       "3  ...        1198.0     676  13.0                          0   \n",
       "4  ...        1275.0    2336  14.0                          0   \n",
       "\n",
       "   weather_grade_Slightly Bad Weather  weather_grade_Very Bad Weather  \\\n",
       "0                                   0                               0   \n",
       "1                                   0                               0   \n",
       "2                                   0                               0   \n",
       "3                                   0                               0   \n",
       "4                                   0                               0   \n",
       "\n",
       "   source_type_2.10E+18  source_type_DELIVERY  source_type_PICKUP  action_type  \n",
       "0                     0                     0                   0            0  \n",
       "1                     0                     0                   1            1  \n",
       "2                     0                     1                   0            0  \n",
       "3                     0                     0                   1            1  \n",
       "4                     0                     1                   0            0  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 297,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = xgbt.predict(X_test_clf)\n",
    "test_clf['action_type'] = y_pred\n",
    "test_clf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order</th>\n",
       "      <th>action_type_DELIVERY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order  action_type_DELIVERY\n",
       "0      0                     0\n",
       "1      1                     1\n",
       "2      2                     0\n",
       "3      3                     1\n",
       "4      4                     0"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Clf = pd.read_csv('Classification.csv')\n",
    "Clf['action_type_DELIVERY'] = y_pred\n",
    "Clf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [],
   "source": [
    "Clf.to_csv('Classification.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>courier_id</th>\n",
       "      <th>wave_index</th>\n",
       "      <th>tracking_id</th>\n",
       "      <th>courier_wave_start_lng</th>\n",
       "      <th>courier_wave_start_lat</th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>level</th>\n",
       "      <th>speed</th>\n",
       "      <th>max_load</th>\n",
       "      <th>...</th>\n",
       "      <th>target_lat</th>\n",
       "      <th>grid_distance</th>\n",
       "      <th>expected_use_time</th>\n",
       "      <th>urgency</th>\n",
       "      <th>hour</th>\n",
       "      <th>weather_grade_Bad Weather</th>\n",
       "      <th>weather_grade_Slightly Bad Weather</th>\n",
       "      <th>weather_grade_Very Bad Weather</th>\n",
       "      <th>source_type_DELIVERY</th>\n",
       "      <th>source_type_PICKUP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.141946</td>\n",
       "      <td>377.0</td>\n",
       "      <td>804</td>\n",
       "      <td>1246</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.140281</td>\n",
       "      <td>780.0</td>\n",
       "      <td>298</td>\n",
       "      <td>1246</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.141811</td>\n",
       "      <td>550.0</td>\n",
       "      <td>545</td>\n",
       "      <td>2462</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.146201</td>\n",
       "      <td>707.0</td>\n",
       "      <td>341</td>\n",
       "      <td>1205</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10007871</td>\n",
       "      <td>0</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630997</td>\n",
       "      <td>39.142343</td>\n",
       "      <td>20200201</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>4.751832</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.142231</td>\n",
       "      <td>770.0</td>\n",
       "      <td>166</td>\n",
       "      <td>1882</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   courier_id  wave_index   tracking_id  courier_wave_start_lng  \\\n",
       "0    10007871           0  2.100000e+18              121.630997   \n",
       "1    10007871           0  2.100000e+18              121.630997   \n",
       "2    10007871           0  2.100000e+18              121.630997   \n",
       "3    10007871           0  2.100000e+18              121.630997   \n",
       "4    10007871           0  2.100000e+18              121.630997   \n",
       "\n",
       "   courier_wave_start_lat      date         group  level     speed  max_load  \\\n",
       "0               39.142343  20200201  2.020000e+16      3  4.751832        11   \n",
       "1               39.142343  20200201  2.020000e+16      3  4.751832        11   \n",
       "2               39.142343  20200201  2.020000e+16      3  4.751832        11   \n",
       "3               39.142343  20200201  2.020000e+16      3  4.751832        11   \n",
       "4               39.142343  20200201  2.020000e+16      3  4.751832        11   \n",
       "\n",
       "   ... target_lat grid_distance  expected_use_time  urgency  hour  \\\n",
       "0  ...  39.141946         377.0                804     1246    11   \n",
       "1  ...  39.140281         780.0                298     1246    11   \n",
       "2  ...  39.141811         550.0                545     2462    11   \n",
       "3  ...  39.146201         707.0                341     1205    11   \n",
       "4  ...  39.142231         770.0                166     1882    11   \n",
       "\n",
       "   weather_grade_Bad Weather  weather_grade_Slightly Bad Weather  \\\n",
       "0                          0                                   0   \n",
       "1                          0                                   0   \n",
       "2                          0                                   0   \n",
       "3                          0                                   0   \n",
       "4                          0                                   0   \n",
       "\n",
       "   weather_grade_Very Bad Weather  source_type_DELIVERY  source_type_PICKUP  \n",
       "0                               0                     0                   0  \n",
       "1                               0                     0                   1  \n",
       "2                               0                     1                   0  \n",
       "3                               0                     0                   1  \n",
       "4                               0                     1                   0  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = pd.read_csv(\"dataframe_train_reg.csv\")\n",
    "#get dummies\n",
    "df1 = pd.get_dummies(df1, columns=['weather_grade','source_type','action_type'],drop_first=False)\n",
    "#drop baseline\n",
    "df1 = df1.drop(columns = ['weather_grade_Normal Weather','source_type_ASSIGN','action_type_PICKUP','action_type_DELIVERY'])\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [],
   "source": [
    "X1 = df1.drop(columns = ['expected_use_time','courier_id', 'wave_index', 'tracking_id', 'group', 'id','aoi_id','shop_id'])\n",
    "y1 = np.array(df1['expected_use_time'])\n",
    "# Split dataframe_train into training and testing sets.\n",
    "from sklearn.model_selection import train_test_split as tr_te_split\n",
    "X1_train, X1_test, y1_train, y1_test = tr_te_split(X1, y1,random_state=666,test_size=0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1) Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression as LinReg\n",
    "from sklearn.metrics import r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is 0.2631\n",
      "The out-of-sample R-squared is 0.2955\n"
     ]
    }
   ],
   "source": [
    "LinR = make_pipeline(StandardScaler(),LinReg(fit_intercept=True))\n",
    "LinR.fit(X1_train, y1_train)\n",
    "print(\"The in-sample R-squared is %0.4f\"% r2_score(y1_train, LinR.predict(X1_train)))\n",
    "print(\"The out-of-sample R-squared is %0.4f\"% r2_score(y1_test, LinR.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.0941\n",
      "The out-of-sample R-squared is: 0.1161\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=11\n",
    "pca_LinR = make_pipeline(StandardScaler(), PCA(n_components=11), LinReg(fit_intercept=True))\n",
    "pca_LinR.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_LinR.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_LinR.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.0936\n",
      "The out-of-sample R-squared is: 0.1158\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=10\n",
    "pca_LinR = make_pipeline(StandardScaler(), PCA(n_components=10), LinReg(fit_intercept=True))\n",
    "pca_LinR.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_LinR.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_LinR.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.0935\n",
      "The out-of-sample R-squared is: 0.1157\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=9\n",
    "pca_LinR = make_pipeline(StandardScaler(), PCA(n_components=9), LinReg(fit_intercept=True))\n",
    "pca_LinR.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_LinR.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_LinR.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.0932\n",
      "The out-of-sample R-squared is: 0.1154\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=8\n",
    "pca_LinR = make_pipeline(StandardScaler(), PCA(n_components=8), LinReg(fit_intercept=True))\n",
    "pca_LinR.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_LinR.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_LinR.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.3545\n",
      "The out-of-sample R-squared is: 0.3536\n"
     ]
    }
   ],
   "source": [
    "pca_LinR = make_pipeline(StandardScaler(), PolynomialFeatures(degree=2), LinReg(fit_intercept=True))\n",
    "pca_LinR.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_LinR.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_LinR.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.3760\n",
      "The out-of-sample R-squared is: 0.3735\n"
     ]
    }
   ],
   "source": [
    "pca_LinR = make_pipeline(StandardScaler(), PolynomialFeatures(degree=3), LinReg(fit_intercept=True))\n",
    "pca_LinR.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_LinR.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_LinR.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.3852\n",
      "The out-of-sample R-squared is: 0.3725\n"
     ]
    }
   ],
   "source": [
    "pca_LinR = make_pipeline(StandardScaler(), PolynomialFeatures(degree=4), LinReg(fit_intercept=True))\n",
    "pca_LinR.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_LinR.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_LinR.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is 0.3758\n"
     ]
    }
   ],
   "source": [
    "LinR = make_pipeline(StandardScaler(),PolynomialFeatures(degree=3),LinReg(fit_intercept=True))\n",
    "LinR.fit(X1, y1)\n",
    "print(\"The in-sample R-squared is %0.4f\"% r2_score(y1, LinR.predict(X1)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2) K-Nearest Neighbors Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best n_neighbor is {'n_neighbors': 150}\n",
      "The in-sample R-squared is 0.2315\n"
     ]
    }
   ],
   "source": [
    "grid_knn_reg = GridSearchCV(KNeighborsRegressor(),[{'n_neighbors':[10,50,100,150,200]}],scoring = 'r2',cv=5)\n",
    "grid_knn_reg.fit(X1_train,y1_train)\n",
    "print(\"The best n_neighbor is\",grid_knn_reg.best_params_)\n",
    "print(\"The in-sample R-squared is %0.4f\" % grid_knn_reg.best_score_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.3470\n",
      "The out-of-sample R-squared is: 0.3378\n"
     ]
    }
   ],
   "source": [
    "knn_reg = make_pipeline(StandardScaler(),KNeighborsRegressor(n_neighbors = 150))\n",
    "knn_reg.fit(X1_train,y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,knn_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,knn_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.3445\n",
      "The out-of-sample R-squared is: 0.3356\n"
     ]
    }
   ],
   "source": [
    "## PCA with n_components=11\n",
    "knn_reg = make_pipeline(StandardScaler(), PCA(n_components=11),KNeighborsRegressor(n_neighbors = 150))\n",
    "knn_reg.fit(X1_train,y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,knn_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,knn_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.3492\n",
      "The out-of-sample R-squared is: 0.3407\n"
     ]
    }
   ],
   "source": [
    "## PCA with n_components=10\n",
    "knn_reg = make_pipeline(StandardScaler(), PCA(n_components=10),KNeighborsRegressor(n_neighbors = 150))\n",
    "knn_reg.fit(X1_train,y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,knn_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,knn_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.3572\n",
      "The out-of-sample R-squared is: 0.3478\n"
     ]
    }
   ],
   "source": [
    "## PCA with n_components=9\n",
    "knn_reg = make_pipeline(StandardScaler(), PCA(n_components=9),KNeighborsRegressor(n_neighbors = 150))\n",
    "knn_reg.fit(X1_train,y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,knn_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,knn_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.3595\n",
      "The out-of-sample R-squared is: 0.3502\n"
     ]
    }
   ],
   "source": [
    "## PCA with n_components=8\n",
    "knn_reg = make_pipeline(StandardScaler(), PCA(n_components=8),KNeighborsRegressor(n_neighbors = 150))\n",
    "knn_reg.fit(X1_train,y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,knn_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,knn_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.3633\n"
     ]
    }
   ],
   "source": [
    "knn_reg = make_pipeline(StandardScaler(), PCA(n_components=8),KNeighborsRegressor(n_neighbors = 150))\n",
    "knn_reg.fit(X1,y1)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,knn_reg.predict(X1_train)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3) Decision Tree Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 1.0000\n",
      "The out-of-sample R-squared is: -0.3188\n"
     ]
    }
   ],
   "source": [
    "tree_reg =  DecisionTreeRegressor() \n",
    "tree_reg.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,tree_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,tree_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4018\n",
      "The out-of-sample R-squared is: 0.3669\n"
     ]
    }
   ],
   "source": [
    "tree_reg =  DecisionTreeRegressor(ccp_alpha = 0.01, max_depth=10) \n",
    "tree_reg.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,tree_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,tree_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4148\n",
      "The out-of-sample R-squared is: 0.3565\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=12\n",
    "pca_treereg = make_pipeline(PCA(n_components=12), DecisionTreeRegressor(ccp_alpha = 0.01, max_depth=10))\n",
    "pca_treereg.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_treereg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_treereg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4151\n",
      "The out-of-sample R-squared is: 0.3603\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=11\n",
    "pca_treereg = make_pipeline(PCA(n_components=11), DecisionTreeRegressor(ccp_alpha = 0.01, max_depth=10))\n",
    "pca_treereg.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_treereg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_treereg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4032\n",
      "The out-of-sample R-squared is: 0.3595\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=10\n",
    "pca_treereg = make_pipeline(PCA(n_components=10), DecisionTreeRegressor(ccp_alpha = 0.01, max_depth=10))\n",
    "pca_treereg.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_treereg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_treereg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4032\n",
      "The out-of-sample R-squared is: 0.3619\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=9\n",
    "pca_treereg = make_pipeline(PCA(n_components=9), DecisionTreeRegressor(ccp_alpha = 0.01, max_depth=10))\n",
    "pca_treereg.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_treereg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_treereg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4030\n",
      "The out-of-sample R-squared is: 0.3652\n"
     ]
    }
   ],
   "source": [
    "##PCA with n_components=8\n",
    "pca_treereg = make_pipeline(PCA(n_components=8), DecisionTreeRegressor(ccp_alpha = 0.01, max_depth=10))\n",
    "pca_treereg.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,pca_treereg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,pca_treereg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4135\n",
      "The out-of-sample R-squared is: 0.3509\n"
     ]
    }
   ],
   "source": [
    "tree_reg = make_pipeline(PolynomialFeatures(degree=2),DecisionTreeRegressor(ccp_alpha = 0.01, max_depth=10))\n",
    "tree_reg.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,tree_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,tree_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4117\n",
      "The out-of-sample R-squared is: 0.3537\n"
     ]
    }
   ],
   "source": [
    "tree_reg = make_pipeline(PolynomialFeatures(degree=3),DecisionTreeRegressor(ccp_alpha = 0.01, max_depth=10))\n",
    "tree_reg.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,tree_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,tree_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4107\n",
      "The out-of-sample R-squared is: 0.3549\n"
     ]
    }
   ],
   "source": [
    "tree_reg = make_pipeline(PolynomialFeatures(degree=4),DecisionTreeRegressor(ccp_alpha = 0.01, max_depth=10))\n",
    "tree_reg.fit(X1_train, y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,tree_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,tree_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4) Random Forest Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.9053\n",
      "The out-of-sample R-squared is: 0.3485\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8\" ><thead>    <tr>        <th class=\"col_heading level0 col0\" >Feature</th>        <th class=\"col_heading level0 col1\" >Importance</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row0_col0\" class=\"data row0 col0\" >date</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row0_col1\" class=\"data row0 col1\" >0.051714</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row1_col0\" class=\"data row1 col0\" >level</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row1_col1\" class=\"data row1 col1\" >0.018354</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row2_col0\" class=\"data row2 col0\" >speed</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row2_col1\" class=\"data row2 col1\" >0.145587</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row3_col0\" class=\"data row3 col0\" >max_load</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row3_col1\" class=\"data row3 col1\" >0.054247</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row4_col0\" class=\"data row4 col0\" >grid_distance</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row4_col1\" class=\"data row4 col1\" >0.317835</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row5_col0\" class=\"data row5 col0\" >urgency</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row5_col1\" class=\"data row5 col1\" >0.227304</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row6_col0\" class=\"data row6 col0\" >hour</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row6_col1\" class=\"data row6 col1\" >0.061924</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row7_col0\" class=\"data row7 col0\" >weather_grade_Bad Weather</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row7_col1\" class=\"data row7 col1\" >0.000049</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row8_col0\" class=\"data row8 col0\" >weather_grade_Slightly Bad Weather</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row8_col1\" class=\"data row8 col1\" >0.007329</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row9_col0\" class=\"data row9 col0\" >weather_grade_Very Bad Weather</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row9_col1\" class=\"data row9 col1\" >0.007379</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row10_col0\" class=\"data row10 col0\" >source_type_DELIVERY</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row10_col1\" class=\"data row10 col1\" >0.091302</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row11_col0\" class=\"data row11 col0\" >source_type_PICKUP</td>\n",
       "                        <td id=\"T_da40a620_9ae6_11eb_8fd4_600308a139b8row11_col1\" class=\"data row11 col1\" >0.016975</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7ff0f6041520>"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Forestreg = RandomForestRegressor(n_estimators=50)\n",
    "Forestreg.fit(X1_train, y1_train)\n",
    "\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,Forestreg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,Forestreg.predict(X1_test)))\n",
    "df_feature_importance = pd.DataFrame({\n",
    "    'Feature': X1_train.columns,\n",
    "    'Importance': Forestreg.feature_importances_\n",
    "})\n",
    "df_feature_importance.style.hide_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.9095\n",
      "The out-of-sample R-squared is: 0.3549\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8\" ><thead>    <tr>        <th class=\"col_heading level0 col0\" >Feature</th>        <th class=\"col_heading level0 col1\" >Importance</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row0_col0\" class=\"data row0 col0\" >date</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row0_col1\" class=\"data row0 col1\" >0.051825</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row1_col0\" class=\"data row1 col0\" >level</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row1_col1\" class=\"data row1 col1\" >0.018457</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row2_col0\" class=\"data row2 col0\" >speed</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row2_col1\" class=\"data row2 col1\" >0.145260</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row3_col0\" class=\"data row3 col0\" >max_load</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row3_col1\" class=\"data row3 col1\" >0.054214</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row4_col0\" class=\"data row4 col0\" >grid_distance</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row4_col1\" class=\"data row4 col1\" >0.318031</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row5_col0\" class=\"data row5 col0\" >urgency</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row5_col1\" class=\"data row5 col1\" >0.227330</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row6_col0\" class=\"data row6 col0\" >hour</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row6_col1\" class=\"data row6 col1\" >0.061872</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row7_col0\" class=\"data row7 col0\" >weather_grade_Bad Weather</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row7_col1\" class=\"data row7 col1\" >0.000057</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row8_col0\" class=\"data row8 col0\" >weather_grade_Slightly Bad Weather</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row8_col1\" class=\"data row8 col1\" >0.007069</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row9_col0\" class=\"data row9 col0\" >weather_grade_Very Bad Weather</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row9_col1\" class=\"data row9 col1\" >0.007407</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row10_col0\" class=\"data row10 col0\" >source_type_DELIVERY</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row10_col1\" class=\"data row10 col1\" >0.091512</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row11_col0\" class=\"data row11 col0\" >source_type_PICKUP</td>\n",
       "                        <td id=\"T_720a332c_9ae7_11eb_8fd4_600308a139b8row11_col1\" class=\"data row11 col1\" >0.016965</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fef1e08e250>"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Forestreg = RandomForestRegressor(n_estimators=100)\n",
    "Forestreg.fit(X1_train, y1_train)\n",
    "\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,Forestreg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,Forestreg.predict(X1_test)))\n",
    "df_feature_importance = pd.DataFrame({\n",
    "    'Feature': X1_train.columns,\n",
    "    'Importance': Forestreg.feature_importances_\n",
    "})\n",
    "df_feature_importance.style.hide_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.9126\n",
      "The out-of-sample R-squared is: 0.3606\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8\" ><thead>    <tr>        <th class=\"col_heading level0 col0\" >Feature</th>        <th class=\"col_heading level0 col1\" >Importance</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row0_col0\" class=\"data row0 col0\" >date</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row0_col1\" class=\"data row0 col1\" >0.051696</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row1_col0\" class=\"data row1 col0\" >level</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row1_col1\" class=\"data row1 col1\" >0.018578</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row2_col0\" class=\"data row2 col0\" >speed</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row2_col1\" class=\"data row2 col1\" >0.145065</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row3_col0\" class=\"data row3 col0\" >max_load</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row3_col1\" class=\"data row3 col1\" >0.054142</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row4_col0\" class=\"data row4 col0\" >grid_distance</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row4_col1\" class=\"data row4 col1\" >0.318142</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row5_col0\" class=\"data row5 col0\" >urgency</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row5_col1\" class=\"data row5 col1\" >0.227250</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row6_col0\" class=\"data row6 col0\" >hour</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row6_col1\" class=\"data row6 col1\" >0.062047</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row7_col0\" class=\"data row7 col0\" >weather_grade_Bad Weather</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row7_col1\" class=\"data row7 col1\" >0.000057</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row8_col0\" class=\"data row8 col0\" >weather_grade_Slightly Bad Weather</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row8_col1\" class=\"data row8 col1\" >0.007083</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row9_col0\" class=\"data row9 col0\" >weather_grade_Very Bad Weather</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row9_col1\" class=\"data row9 col1\" >0.007453</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row10_col0\" class=\"data row10 col0\" >source_type_DELIVERY</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row10_col1\" class=\"data row10 col1\" >0.091507</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                                <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row11_col0\" class=\"data row11 col0\" >source_type_PICKUP</td>\n",
       "                        <td id=\"T_92ab5450_9aea_11eb_8fd4_600308a139b8row11_col1\" class=\"data row11 col1\" >0.016982</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fef1e0b8730>"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Forestreg = RandomForestRegressor(n_estimators=500)\n",
    "Forestreg.fit(X1_train, y1_train)\n",
    "\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,Forestreg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,Forestreg.predict(X1_test)))\n",
    "df_feature_importance = pd.DataFrame({\n",
    "    'Feature': X1_train.columns,\n",
    "    'Importance': Forestreg.feature_importances_\n",
    "})\n",
    "df_feature_importance.style.hide_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Forestreg = RandomForestRegressor(n_estimators=1000)\n",
    "Forestreg.fit(X1_train, y1_train)\n",
    "\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,Forestreg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,Forestreg.predict(X1_test)))\n",
    "df_feature_importance = pd.DataFrame({\n",
    "    'Feature': X1_train.columns,\n",
    "    'Importance': Forestreg.feature_importances_\n",
    "})\n",
    "df_feature_importance.style.hide_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5) XGBT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4657\n",
      "The out-of-sample R-squared is: 0.3893\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'grid_distance': 10082920.271898286,\n",
       " 'source_type_PICKUP': 48046434.22112205,\n",
       " 'source_type_DELIVERY': 60442221.76033414,\n",
       " 'urgency': 3303136.6650009616,\n",
       " 'hour': 806987.1577194658,\n",
       " 'max_load': 865316.038381946,\n",
       " 'level': 569727.6826909778,\n",
       " 'speed': 682730.3333974895,\n",
       " 'date': 719706.9271849971,\n",
       " 'weather_grade_Very Bad Weather': 945751.7967885943,\n",
       " 'weather_grade_Slightly Bad Weather': 885698.3909937334,\n",
       " 'weather_grade_Bad Weather': 298136.03278}"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train1 = xgb.DMatrix(data=X1_train,label= y1_train)\n",
    "data_test1 = xgb.DMatrix(data=X1_test,label= y1_test)\n",
    "xgbt_reg = xgb.XGBRegressor(objective ='reg:squarederror', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False)\n",
    "xgbt_reg.fit(X1_train,y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,xgbt_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,xgbt_reg.predict(X1_test)))\n",
    "xgbt_reg.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4877\n",
      "The out-of-sample R-squared is: 0.3864\n"
     ]
    }
   ],
   "source": [
    "xgbt_reg = make_pipeline(PCA(n_components = 11), xgb.XGBRegressor(objective ='reg:squarederror', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt_reg.fit(X1_train,y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,xgbt_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,xgbt_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4745\n",
      "The out-of-sample R-squared is: 0.3876\n"
     ]
    }
   ],
   "source": [
    "xgbt_reg = make_pipeline(PCA(n_components = 10), xgb.XGBRegressor(objective ='reg:squarederror', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt_reg.fit(X1_train,y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,xgbt_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,xgbt_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4704\n",
      "The out-of-sample R-squared is: 0.3879\n"
     ]
    }
   ],
   "source": [
    "xgbt_reg = make_pipeline(PCA(n_components = 8), xgb.XGBRegressor(objective ='reg:squarederror', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt_reg.fit(X1_train,y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,xgbt_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,xgbt_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4853\n",
      "The out-of-sample R-squared is: 0.3855\n"
     ]
    }
   ],
   "source": [
    "xgbt_reg = make_pipeline(PolynomialFeatures(degree = 2), xgb.XGBRegressor(objective ='reg:squarederror', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt_reg.fit(X1_train,y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,xgbt_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,xgbt_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4893\n",
      "The out-of-sample R-squared is: 0.3843\n"
     ]
    }
   ],
   "source": [
    "xgbt_reg = make_pipeline(PolynomialFeatures(degree = 3), xgb.XGBRegressor(objective ='reg:squarederror', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False))\n",
    "xgbt_reg.fit(X1_train,y1_train)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1_train,xgbt_reg.predict(X1_train)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1_test,xgbt_reg.predict(X1_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.4506\n",
      "The out-of-sample R-squared is: 0.4506\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'grid_distance': 13369243.328047263,\n",
       " 'source_type_PICKUP': 73194842.53713952,\n",
       " 'source_type_DELIVERY': 84959786.8639149,\n",
       " 'urgency': 4240350.985913365,\n",
       " 'hour': 885994.7495238832,\n",
       " 'max_load': 947269.9211226532,\n",
       " 'date': 904190.824623298,\n",
       " 'level': 627379.9948606725,\n",
       " 'speed': 725829.8045520696,\n",
       " 'weather_grade_Very Bad Weather': 1183835.919294105,\n",
       " 'weather_grade_Slightly Bad Weather': 1040827.0526891891,\n",
       " 'weather_grade_Bad Weather': 363694.4686576923}"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train1 = xgb.DMatrix(data=X1,label= y1)\n",
    "xgbt_reg = xgb.XGBRegressor(objective ='reg:squarederror', colsample_bynode=0.8, learning_rate = 0.1,gamma = 0.001,\n",
    "                max_depth = 10, n_estimators = 50,use_label_encoder=False)\n",
    "xgbt_reg.fit(X1,y1)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1,xgbt_reg.predict(X1)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1,xgbt_reg.predict(X1)))\n",
    "xgbt_reg.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The in-sample R-squared is: 0.8241\n",
      "The out-of-sample R-squared is: 0.8241\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'grid_distance': 1741040.931464037,\n",
       " 'source_type_PICKUP': 5491499.7758363485,\n",
       " 'source_type_DELIVERY': 7584798.850308618,\n",
       " 'urgency': 932791.8502427733,\n",
       " 'level': 250693.11900689558,\n",
       " 'max_load': 351582.2329224031,\n",
       " 'date': 275747.90653513523,\n",
       " 'courier_wave_start_lng': 182620.4140895782,\n",
       " 'speed': 299491.95190578204,\n",
       " 'hour': 304320.05961766344,\n",
       " 'courier_wave_start_lat': 274417.1579653727,\n",
       " 'weather_grade_Slightly Bad Weather': 339232.7374616492,\n",
       " 'source_lng': 326077.5606955906,\n",
       " 'source_lat': 359073.1473404627,\n",
       " 'target_lat': 553914.3935060825,\n",
       " 'target_lng': 490266.04063423857,\n",
       " 'weather_grade_Very Bad Weather': 387865.2263968776,\n",
       " 'weather_grade_Bad Weather': 203628.31759999998}"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train1 = xgb.DMatrix(data=X1,label= y1)\n",
    "xgbt_reg = xgb.XGBRegressor(objective ='reg:squarederror',\n",
    "                max_depth = 10, n_estimators = 500,use_label_encoder=False)\n",
    "xgbt_reg.fit(X1,y1)\n",
    "print('The in-sample R-squared is: %0.4f' % r2_score(y1,xgbt_reg.predict(X1)))\n",
    "print('The out-of-sample R-squared is: %0.4f' % r2_score(y1,xgbt_reg.predict(X1)))\n",
    "xgbt_reg.get_booster().get_score(importance_type='gain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>courier_id</th>\n",
       "      <th>wave_index</th>\n",
       "      <th>tracking_id</th>\n",
       "      <th>courier_wave_start_lng</th>\n",
       "      <th>courier_wave_start_lat</th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>level</th>\n",
       "      <th>speed</th>\n",
       "      <th>max_load</th>\n",
       "      <th>...</th>\n",
       "      <th>target_lat</th>\n",
       "      <th>grid_distance</th>\n",
       "      <th>urgency</th>\n",
       "      <th>hour</th>\n",
       "      <th>weather_grade_Bad Weather</th>\n",
       "      <th>weather_grade_Slightly Bad Weather</th>\n",
       "      <th>weather_grade_Very Bad Weather</th>\n",
       "      <th>source_type_2.10E+18</th>\n",
       "      <th>source_type_DELIVERY</th>\n",
       "      <th>source_type_PICKUP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.144603</td>\n",
       "      <td>796.0</td>\n",
       "      <td>1776</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.150661</td>\n",
       "      <td>1048.0</td>\n",
       "      <td>697</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.144603</td>\n",
       "      <td>1019.0</td>\n",
       "      <td>1756</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.152711</td>\n",
       "      <td>1198.0</td>\n",
       "      <td>676</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>39.142762</td>\n",
       "      <td>1275.0</td>\n",
       "      <td>2336</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   courier_id  wave_index   tracking_id  courier_wave_start_lng  \\\n",
       "0    10007871           2  2.100000e+18              121.630558   \n",
       "1    10007871           2  2.100000e+18              121.630558   \n",
       "2    10007871           2  2.100000e+18              121.630558   \n",
       "3    10007871           2  2.100000e+18              121.630558   \n",
       "4    10007871           2  2.100000e+18              121.630558   \n",
       "\n",
       "   courier_wave_start_lat      date         group  level     speed  max_load  \\\n",
       "0                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "1                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "2                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "3                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "4                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "\n",
       "   ... target_lat grid_distance urgency  hour  weather_grade_Bad Weather  \\\n",
       "0  ...  39.144603         796.0    1776  13.0                          0   \n",
       "1  ...  39.150661        1048.0     697  13.0                          0   \n",
       "2  ...  39.144603        1019.0    1756  13.0                          0   \n",
       "3  ...  39.152711        1198.0     676  13.0                          0   \n",
       "4  ...  39.142762        1275.0    2336  14.0                          0   \n",
       "\n",
       "   weather_grade_Slightly Bad Weather  weather_grade_Very Bad Weather  \\\n",
       "0                                   0                               0   \n",
       "1                                   0                               0   \n",
       "2                                   0                               0   \n",
       "3                                   0                               0   \n",
       "4                                   0                               0   \n",
       "\n",
       "   source_type_2.10E+18  source_type_DELIVERY  source_type_PICKUP  \n",
       "0                     0                     0                   0  \n",
       "1                     0                     0                   1  \n",
       "2                     0                     1                   0  \n",
       "3                     0                     0                   1  \n",
       "4                     0                     1                   0  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_reg = pd.read_csv('dataframe_test_reg.csv')\n",
    "test_reg = pd.get_dummies(test_reg, columns=['weather_grade','source_type'],drop_first=False)\n",
    "test_reg = test_reg.drop(columns = ['weather_grade_Normal Weather','source_type_ASSIGN'])\n",
    "test_reg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_reg = test_reg.drop(columns = ['source_type_2.10E+18','courier_id', 'wave_index', 'tracking_id', 'group', 'id','aoi_id','shop_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>courier_id</th>\n",
       "      <th>wave_index</th>\n",
       "      <th>tracking_id</th>\n",
       "      <th>courier_wave_start_lng</th>\n",
       "      <th>courier_wave_start_lat</th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>level</th>\n",
       "      <th>speed</th>\n",
       "      <th>max_load</th>\n",
       "      <th>...</th>\n",
       "      <th>grid_distance</th>\n",
       "      <th>urgency</th>\n",
       "      <th>hour</th>\n",
       "      <th>weather_grade_Bad Weather</th>\n",
       "      <th>weather_grade_Slightly Bad Weather</th>\n",
       "      <th>weather_grade_Very Bad Weather</th>\n",
       "      <th>source_type_2.10E+18</th>\n",
       "      <th>source_type_DELIVERY</th>\n",
       "      <th>source_type_PICKUP</th>\n",
       "      <th>expected_use_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>796.0</td>\n",
       "      <td>1776</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>502.264801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1048.0</td>\n",
       "      <td>697</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>259.445801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1019.0</td>\n",
       "      <td>1756</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>554.091370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1198.0</td>\n",
       "      <td>676</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>217.896988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10007871</td>\n",
       "      <td>2</td>\n",
       "      <td>2.100000e+18</td>\n",
       "      <td>121.630558</td>\n",
       "      <td>39.1409</td>\n",
       "      <td>20200228</td>\n",
       "      <td>2.020000e+16</td>\n",
       "      <td>3</td>\n",
       "      <td>5.535851</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1275.0</td>\n",
       "      <td>2336</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>632.584595</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   courier_id  wave_index   tracking_id  courier_wave_start_lng  \\\n",
       "0    10007871           2  2.100000e+18              121.630558   \n",
       "1    10007871           2  2.100000e+18              121.630558   \n",
       "2    10007871           2  2.100000e+18              121.630558   \n",
       "3    10007871           2  2.100000e+18              121.630558   \n",
       "4    10007871           2  2.100000e+18              121.630558   \n",
       "\n",
       "   courier_wave_start_lat      date         group  level     speed  max_load  \\\n",
       "0                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "1                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "2                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "3                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "4                 39.1409  20200228  2.020000e+16      3  5.535851        11   \n",
       "\n",
       "   ... grid_distance urgency  hour  weather_grade_Bad Weather  \\\n",
       "0  ...         796.0    1776  13.0                          0   \n",
       "1  ...        1048.0     697  13.0                          0   \n",
       "2  ...        1019.0    1756  13.0                          0   \n",
       "3  ...        1198.0     676  13.0                          0   \n",
       "4  ...        1275.0    2336  14.0                          0   \n",
       "\n",
       "   weather_grade_Slightly Bad Weather  weather_grade_Very Bad Weather  \\\n",
       "0                                   0                               0   \n",
       "1                                   0                               0   \n",
       "2                                   0                               0   \n",
       "3                                   0                               0   \n",
       "4                                   0                               0   \n",
       "\n",
       "   source_type_2.10E+18  source_type_DELIVERY  source_type_PICKUP  \\\n",
       "0                     0                     0                   0   \n",
       "1                     0                     0                   1   \n",
       "2                     0                     1                   0   \n",
       "3                     0                     0                   1   \n",
       "4                     0                     1                   0   \n",
       "\n",
       "   expected_use_time  \n",
       "0         502.264801  \n",
       "1         259.445801  \n",
       "2         554.091370  \n",
       "3         217.896988  \n",
       "4         632.584595  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 313,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = xgbt_reg.predict(X_test_reg)\n",
    "test_reg['expected_use_time'] = y_pred\n",
    "test_reg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order</th>\n",
       "      <th>expected_use_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>502.264801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>259.445801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>554.091370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>217.896988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>632.584595</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order  expected_use_time\n",
       "0      0         502.264801\n",
       "1      1         259.445801\n",
       "2      2         554.091370\n",
       "3      3         217.896988\n",
       "4      4         632.584595"
      ]
     },
     "execution_count": 314,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Reg = pd.read_csv('Regression.csv')\n",
    "Reg['expected_use_time'] = y_pred\n",
    "Reg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [],
   "source": [
    "Reg.to_csv('Regression.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
